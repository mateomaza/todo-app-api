import { Test, TestingModule } from '@nestjs/testing';
import { TaskController } from './task.controller';
import { TaskService } from './task.service';
import { Task } from './task.model';
import { getModelToken } from '@nestjs/mongoose';
import { CreateTaskDto } from './dto/create-task.dto';
import { v4 as uuidv4 } from 'uuid';

const taskMock: Task = {
  id: uuidv4(),
  title: 'Test Task',
  description: 'Test Description',
  completed: false,
  time: new Date(),
  createdAt: new Date(),
  save: jest.fn().mockResolvedValue(this),
} as any;

const taskModelMock = {
  new: jest.fn().mockResolvedValue(taskMock),
  constructor: jest.fn().mockResolvedValue(taskMock),
  find: jest.fn(),
  findOne: jest.fn(),
  findById: jest.fn(),
  create: jest.fn(),
  findByIdAndUpdate: jest.fn(),
  findByIdAndDelete: jest.fn(),
};

const taskServiceMock = {
  create: jest
    .fn()
    .mockImplementation((createTaskDto: CreateTaskDto) =>
      Promise.resolve(taskModelMock),
    ),
  findAll: jest.fn().mockResolvedValue([taskModelMock]),
  findById: jest.fn().mockResolvedValue(taskModelMock),
  update: jest.fn().mockResolvedValue(taskModelMock),
  remove: jest.fn().mockResolvedValue(undefined),
  findUncompletedTasks: jest.fn().mockResolvedValue([taskModelMock]),
};

describe('TaskController', () => {
  let controller: TaskController;
  let service: TaskService

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [TaskController],
      providers: [
        {
          provide: getModelToken(Task.name),
          useValue: taskModelMock,
        },
        {
          provide: TaskService,
          useValue: taskServiceMock,
        },
      ],
    }).compile();

    controller = module.get<TaskController>(TaskController);
    service = module.get<TaskService>(TaskService);
  });

  // Add tests here...
});
